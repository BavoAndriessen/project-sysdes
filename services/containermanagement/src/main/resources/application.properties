server.port=8080

spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://container-db:5432/containers
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none



# deze 2 aanzetten bij docker-compose
#spring.cloud.stream.kafka.binder.brokers=kafka
#spring.cloud.stream.kafka.binder.zkNodes=zookeeper

spring.cloud.stream.bindings.new_containers.contentType=application/json
spring.cloud.stream.bindings.new_containers.destination=new_containers
spring.cloud.stream.bindings.new_containers.group=1
# als er meerdere partities nodig zijn => containerid gebruiken als partitionKey, omdat dan alle messages van dezelfde container in de juiste volgorde afgehandeld zullen worden
#spring.cloud.stream.bindings.new_containers.producer.partitioned=true
#spring.cloud.stream.bindings.new_containers.producer.partition-key-expression=headers['partitionKey']
#spring.cloud.stream.bindings.new_containers.producer.partition-count=5

spring.cloud.stream.bindings.containers_ready_at_dock.contentType=application/json
spring.cloud.stream.bindings.containers_ready_at_dock.destination=containers_ready_at_dock
spring.cloud.stream.bindings.containers_ready_at_dock.group=1
